1 Two Sum
#include <stdio.h>

#define SIZE 1000

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    static int result[2];
    for (int i = 0; i < numsSize; i++) {
        for (int j = i + 1; j < numsSize; j++) {
            if (nums[i] + nums[j] == target) {
                result[0] = i;
                result[1] = j;
                *returnSize = 2;
                return result;
            }
        }
    }
    *returnSize = 0;
    return NULL;
}

2 Binary Search

int binarySearch(int arr[], int n, int target) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

3 Anagram check

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

void sortString(char* str) {
    int n = strlen(str);
    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if (str[i] > str[j]) {
                char temp = str[i];
                str[i] = str[j];
                str[j] = temp;
            }
        }
    }
}

bool isAnagram(char* str1, char* str2) {
    if (strlen(str1) != strlen(str2))
        return false;

    sortString(str1);
    sortString(str2);

    return strcmp(str1, str2) == 0;
}

4 Longest substring without repeating character

#include <stdio.h>
#include <string.h>

int longestUniqueSubstring(char* s) {
    int lastIndex[256];
    for (int i = 0; i < 256; i++)
        lastIndex[i] = -1;

    int maxLength = 0, start = 0;
    for (int i = 0; s[i] != '\0'; i++) {
        if (lastIndex[(unsigned char)s[i]] >= start)
            start = lastIndex[(unsigned char)s[i]] + 1;

        lastIndex[(unsigned char)s[i]] = i;
        if (i - start + 1 > maxLength)
            maxLength = i - start + 1;
    }
    return maxLength;
}

5 count palindrome substring 
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

int expandFromCenter(char* s, int left, int right) {
    int count = 0;
    int len = strlen(s);
    while (left >= 0 && right < len && s[left] == s[right]) {
        count++;
        left--;
        right++;
    }
    return count;
}

int countPalindromicSubstrings(char* s) {
    int count = 0;
    int len = strlen(s);
    for (int i = 0; i < len; i++) {
        count += expandFromCenter(s, i, i);     // Odd-length
        count += expandFromCenter(s, i, i + 1); // Even-length
    }
    return count;
}

