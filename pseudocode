1 Two Sum

function twoSum(nums, target):
    num_to_index = empty map

    for i from 0 to length(nums) - 1:
        complement = target - nums[i]

        if complement in num_to_index:
            return [num_to_index[complement], i]

        num_to_index[nums[i]] = i

    return null

2 Binary search 

function binarySearch(arr, target):
    low = 0
    high = length(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            return mid
        else if arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1

3 anagram check

function isAnagram(str1, str2):
    if length(str1) ≠ length(str2):
        return false

    sorted1 = sort(str1)
    sorted2 = sort(str2)

    return sorted1 == sorted2

4 Longest substring without repeating character

function longestUniqueSubstring(s):
    start = 0
    maxLength = 0
    charIndexMap = empty map

    for i from 0 to length(s) - 1:
        if s[i] in charIndexMap and charIndexMap[s[i]] >= start:
            start = charIndexMap[s[i]] + 1

        charIndexMap[s[i]] = i
        maxLength = max(maxLength, i - start + 1)

    return maxLength
 5 count palindrome substring
 function countPalindromicSubstrings(s):
    count = 0

    for center from 0 to length(s) - 1:
        count += expandFromCenter(s, center, center)      // Odd
        count += expandFromCenter(s, center, center + 1)  // Even

    return count

function expandFromCenter(s, left, right):
    local_count = 0

    while left ≥ 0 and right < length(s) and s[left] == s[right]:
        local_count += 1
        left -= 1
        right += 1

    return local_count

